<button id="showSize" class="btn btn--primary btn--large ">
  <span>Customize</span><span id="change_sign">+</span>
</button>

<div id="input_data" class="shoulder-custom2 disable_input">
  <style>
    .custom.form__label { margin-bottom: 0.6rem; }
    .field.custom { margin-top: 0; }
    .custom .field__input { padding-top: 0.8rem; }
  </style>

  <div class="one_input_label ">
    <label class="form__label custom custom_label" for="shoulder">Shoulder</label>
    <div class="field custom">
      <input
        class="field__input"
        form="{{ 'product-form-' | append: section.id }}"
        type="number"
        id="shoulder"
        name="properties[Shoulder(in Inches)]"
      >
    </div>
  </div>
  <div class="one_input_label">
    <label class="form__label custom custom_label" for="waist">Waist</label>
    <div class="field custom">
      <input
        class="field__input"
        form="{{ 'product-form-' | append: section.id }}"
        type="number"
        id="waist"
        name="properties[Waist (in Inches)]"
      >
    </div>
  </div>

  <div class="one_input_label">
    <label class="form__label custom custom_label" for="hips">Hips</label>
    <div class="field custom">
      <input
        class="field__input"
        form="{{ 'product-form-' | append: section.id }}"
        type="number"
        id="hips"
        name="properties[Hips (in Inches)]"
      >
    </div>
  </div>

  <div class="one_input_label">
    <label class="form__label custom custom_label" for="chest">Chest</label>
    <div class="field custom">
      <input
        class="field__input"
        form="{{ 'product-form-' | append: section.id }}"
        type="number"
        id="chest"
        name="properties[Chest (in Inches)]"
      >
    </div>
  </div>
  <p>Note : Above all measurements are in inches</p>
  <div class="additional_block">
    <label class="form__label custom custom_label" for="message">Additional Note : </label>
    <div class="field custom additonal_message_design">
      <input
        class="field__input"
        form="{{ 'product-form-' | append: section.id }}"
        type="text"
        id="message"
        name="properties[Additional Note]"
      >
    </div>
  </div>
</div>

<style>
  #showSize {
    background-color: rgba(158, 133, 133, 0.48);
    color: #581a27;
    margin-top: 12px;
    padding: 8px !important;
    font-size: 12px;
    display: flex;
    justify-content: space-between;
    width: 40%;
    border: 2px solid;
    font-size: 13px;
    border-radius: 5px;
    margin: 0px;

  }


  .additonal_message_design {
    border: 2px solid black;
    height: 150%;
    width: 98% !important;
    margin-left: 4px
  }

    .additional_block{
      margin-left : 5px;
      margin-right : 5px;
    }
    
    .disable_input {
      display: none;
    }
    .able_input {
      display: block;
    }
    .custom_input{
      border : 1px solid black;
    }
    .one_input_label{
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-item: center;
      margin: 7px;
      margin-top: 15px;
    }
    .custom_label{
      font-size : 15px;
      color : #402f2d;
      font-weight : bold;
      margin-top : 0px;
    }

   .field{
    height : 80%;
     width : 60%;
   }

  #input_data {
    border: 2px solid #402f2d;
    padding: 17px 5px;
    margin-top: 0px;
    border-radius: 5px;
  }

  .change_btn {
    background: #c89a44 !important;
    border-radius: 10px;
    color: #581a27 !important;
    border: 2px solid #581a27 !important;
  }
</style>

<script>
  const CSV_URL = "https://cdn.shopify.com/s/files/1/0902/3514/2463/files/product_size_data_duplicate.csv?v=1726481736";

  // Cache object for memoization
  const cache = {
    csvData: null,
    lastFetch: null
  };

  // Utility Functions
  function sanitizeSelectorName(name) {
    return name.replace(/[^a-zA-Z0-9_-]/g, '-')
      .replace(/^-+|-+$/g, '')
      .replace(/\s+/g, '-')
      .toUpperCase();
  }

  function toggleFormContainer() {
    if (document.getElementById('change_sign').innerHTML === '+') {
      document.getElementById('change_sign').innerHTML = '-';
    }
    else if (document.getElementById('change_sign').innerHTML === '-') {
      document.getElementById('change_sign').innerHTML = '+';
    }
    const formContainer = document.getElementById("input_data");
    const showSizeButton = document.getElementById('showSize');
    const isDisabled = formContainer.classList.toggle('disable_input');
    showSizeButton.classList.toggle('change_btn', !isDisabled);

  }

  function parseCSV(csvText) {
    const rows = csvText.split("\n");
    const headers = rows[0].split(",");
    return rows.slice(1).map(row => {
      const values = row.split(",");
      const obj = {};
      headers.slice(1).forEach((header, index) => {
        obj[header] = values[index + 1];
      });
      return {
        body_measurement: values[0],
        ...obj
      };
    });
  }

  function updateProductMeasurements(products, finalValue) {
    const measurementMap = {
      'Shoulder': 'shoulder',
      'Waist': 'waist',
      'Hip': 'hips',
      'Chest': 'chest'
    };
    products.slice(0, -1).forEach(product => {
      const elementId = measurementMap[product.body_measurement];
      if (elementId) {
        document.getElementById(elementId).value = product[finalValue];
      }
    });
  }

  function checkCurrentOption(custom_products) {
    const variantSelects = document.querySelector('variant-selects');
    const currentValues = Array.from(variantSelects.querySelectorAll('select option[selected], fieldset input:checked')).map(el => el.value);
    const compareValue = currentValues[1]; // optionNumber - 1, where optionNumber is 2
    const finalValue = sanitizeSelectorName(compareValue);
    updateProductMeasurements(custom_products, finalValue);
  }

  function fetchCSVData() {
    // Check if we have cached data and it's less than 1 hour old
    const now = Date.now();
    if (cache.csvData && cache.lastFetch && (now - cache.lastFetch < 3600000)) {
      console.log("Using cached CSV data");
      return Promise.resolve(cache.csvData);
    }

    console.log("Fetching fresh CSV data");
    return fetch(CSV_URL)
      .then(response => response.text())
      .then(csvText => {
        console.log("CSV Data:", csvText);
        const products = parseCSV(csvText);

        // Update cache
        cache.csvData = products;
        cache.lastFetch = now;

        return products;
      })
      .catch(error => {
        console.error("Error fetching or parsing CSV:", error);
        throw error;
      });
  }

  function handleProductUpdate() {
    fetchCSVData()
      .then(products => {
        console.log("product data:", products);
        checkCurrentOption(products);
      })
      .catch(error => {
        console.error("Error handling product update:", error);
      });
  }

  // Event Listeners
  document.addEventListener('DOMContentLoaded', () => {
    const showSizeButton = document.getElementById('showSize');
    showSizeButton.addEventListener('click', toggleFormContainer);

    // Initialize form inputs
    const formContainer = document.getElementById("input_data");
    const inputs = formContainer.querySelectorAll('input');


    handleProductUpdate();
    document.querySelector(".product-variant-id").addEventListener('change', handleProductUpdate);
  });
</script>